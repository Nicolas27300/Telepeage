
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import lml.tsii.telepeage.metier.BadgeService;
import lml.tsii.telepeage.metier.BillService;
import lml.tsii.telepeage.metier.CustomerService;
import lml.tsii.telepeage.metier.MetierFactory;
import lml.tsii.telepeage.metier.RideService;
import lml.tsii.telepeage.metier.StationService;
import lml.tsii.telepeage.metier.SubscriptionService;
import lml.tsii.telepeage.metier.entitys.Badge;
import lml.tsii.telepeage.metier.entitys.Bill;
import lml.tsii.telepeage.metier.entitys.Ride;
import lml.tsii.telepeage.metier.entitys.Station;
import lml.tsii.telepeage.metier.entitys.Subscription;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jupiter
 */
public class SimulationTrajet extends javax.swing.JFrame {

    BadgeService badgeSrv;
    StationService stationSrv;
    SubscriptionService subscriptionSrv;
    CustomerService customerSrv;
    BillService billSrv;
    RideService rideSrv;
    Bill bill;

    /**
     * Creates new form SimulationTrajet
     */
    public SimulationTrajet() {
        initComponents();
        this.jComboBoxBadge.removeAllItems();
        this.jComboBoxStation.removeAllItems();
        this.jComboBoxSens.removeAllItems();
        this.jComboBoxSens.addItem("Départ");
        this.jComboBoxSens.addItem("Arrivé");
        this.badgeSrv = MetierFactory.getBadgeService();
        this.stationSrv = MetierFactory.getStationService();
        this.subscriptionSrv = MetierFactory.getSubscriptionService();
        this.customerSrv = MetierFactory.getCustomerService();
        this.billSrv = MetierFactory.getBillService();
        this.rideSrv = MetierFactory.getRideService();
        try {
            List<Badge> badges = badgeSrv.getAll();
            List<Station> stations = stationSrv.getAll();
            for (int i = 0; i < badges.size(); i++) {
                this.jComboBoxBadge.addItem(badges.get(i).getNum());
            }
            for (int i = 0; i < stations.size(); i++) {
                this.jComboBoxStation.addItem(stations.get(i).getName());
            }
        } catch (Exception ex) {
            Logger.getLogger(SimulationTrajet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxBadge = new javax.swing.JComboBox();
        jComboBoxStation = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxSens = new javax.swing.JComboBox();
        jButtonPassage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Badge : ");

        jLabel2.setText("Station : ");

        jComboBoxBadge.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxStation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Sens : ");

        jComboBoxSens.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonPassage.setText("Valider le passage");
        jButtonPassage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPassageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxSens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBoxStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBoxBadge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jButtonPassage)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxBadge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxStation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxSens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonPassage)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPassageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPassageActionPerformed
        try {
            String Sbadge = this.jComboBoxBadge.getSelectedItem().toString();
            String Sstation = this.jComboBoxStation.getSelectedItem().toString();
            System.out.println(Sbadge);
            System.out.println(Sstation);
            List<Badge> badges = this.badgeSrv.getByNumber(Sbadge);
            List<Station> stations = this.stationSrv.getByName(Sstation);
            List<Subscription> subscriptions = this.subscriptionSrv.getByBadge(badges.get(0));
            Date date = new Date();
            String string = date.toString();
            String data[] = string.split(" ");
            StringBuilder dateString = new StringBuilder();
            dateString.append(data[1] + " " + data[5]);
            List<Bill> bills = billSrv.getByCustomerName(this.customerSrv.getBySubscription(subscriptions.get(0)).get(0), dateString.toString());
            if (bills.isEmpty()) {
                System.out.println("Facture du mois pas encore crée");
                this.bill = new Bill();
                bill.setName(dateString.toString());
                bill.setCustomer(this.customerSrv.getBySubscription(subscriptions.get(0)).get(0));
                bill.setPrice(22);
                this.bill = billSrv.add(bill);
            } else {
                System.out.println("T'as déjà une facture pour ce mois");
                this.bill = bills.get(0);
            }
            Ride ride = new Ride();
            ride.setCustomer(this.customerSrv.getBySubscription(subscriptions.get(0)).get(0));
            if (!stations.get(0).isTicket()) {
                ride.setStart(stations.get(0));
                if (this.jComboBoxSens.getSelectedItem().toString().equals("Départ")) {
                    ride.setPrice(stations.get(0).getPrice().getStartPrice().get(subscriptions.get(0).getType()));
                } else {
                    ride.setPrice(stations.get(0).getPrice().getEndPrice().get(subscriptions.get(0).getType()));
                }
                ride.setDate_ride(new Date());
                ride = this.rideSrv.add(ride);
                List<Ride> rides = this.bill.getRides();
                rides.add(ride);
                this.bill.setRides(rides);
                this.bill.setPrice(this.bill.getPrice() + ride.getPrice());
                this.billSrv.update(this.bill);
            } else {
                Ride ride2 = this.rideSrv.getOneByCustomer(this.customerSrv.getBySubscription(subscriptions.get(0)).get(0));
                System.out.println("Station de zone");
                System.out.println(ride2.getId());
                if (!(ride2.getStart().isTicket()) || (ride2.getEnd() != null)) {
                    System.out.println("Trajet précédent terminé");
                    ride.setDate_ride(new Date());
                    ride.setCustomer(this.customerSrv.getBySubscription(subscriptions.get(0)).get(0));
                    ride.setStart(stations.get(0));
                    this.rideSrv.add(ride);
                } else {
                    System.out.println("TRAJET NON TERMINE");
                    ride2.setEnd(stations.get(0));
                    if (stations.get(0).getPk() > ride2.getStart().getPk()) {
                        ride2.setDistance(stations.get(0).getPk() - ride2.getStart().getPk());
                    } else {
                        ride2.setDistance(ride2.getStart().getPk() - stations.get(0).getPk());
                    }
                    this.rideSrv.update(ride2);
                    List<Ride> rides = this.bill.getRides();
                    rides.add(ride2);
                    this.bill.setRides(rides);
                    this.bill.setPrice(this.bill.getPrice() + ride.getPrice());
                    this.billSrv.update(this.bill);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(SimulationTrajet.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonPassageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulationTrajet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulationTrajet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulationTrajet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationTrajet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulationTrajet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPassage;
    private javax.swing.JComboBox jComboBoxBadge;
    private javax.swing.JComboBox jComboBoxSens;
    private javax.swing.JComboBox jComboBoxStation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
